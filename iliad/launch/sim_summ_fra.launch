<!-- Launch this file to simulate the iliad robot-->

<launch>
    <!-- Various arguments -->
    <arg name="rvizconfig" default="$(find iliad)/rviz/summitxl_a.rviz" />
    <arg name="wheels_gui" default="false" />

    <!-- Various arguments for Summit_XL_Steel -->
    <arg name="omni_drive" default="true" />
    <arg if="$(arg omni_drive)" name="ros_planar_move_plugin" value="true"/>
    <arg unless="$(arg omni_drive)" name="ros_planar_move_plugin" default="true"/>
    <arg name="ros_planar_move_plugin_force_based" default="false"/>
    <arg name="launch_robot_localization" default="false" />
    <arg name="use_gpu_for_simulation" default="$(optenv USE_GPU_FOR_SIMULATION false)"/>

 
    
    <arg name="world" default="worlds/empty.world" doc="Filename to a SDF World for gazebo to use" />
    <!-- GAZEBO arguments -->
    <arg name="paused" default="false" />
    <arg name="use_sim_time" default="true" />
    <arg name="gazebo_gui" default="true" />
    <arg name="headless" default="false" />
    <arg name="debug" default="false" />
    <arg name="load_gripper" default="true" />
    
    <!--launch GAZEBO with own world configuration -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world)"/>
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gazebo_gui)" />
        <arg name="paused" value="true" />
        <arg name="use_sim_time" value="$(arg use_sim_time)" />
        <arg name="headless" value="$(arg headless)" />
    </include>
    
    
    <!-- Various arguments for Franka -->
    <arg name="arm_id"      default="panda" doc="Name of the panda robot to spawn" />
    <arg name="use_gripper" default="true"  doc="Should a franka hand be mounted on the flange?" />
    <arg name="controller"  default="joint_position_example_controller"     doc="Which example controller should be started? (One of {cartesian_impedance,model,force,joint_position,joint_velocity}_example_controller)" />
    <arg name="x"           default="0"     doc="How far forward to place the base of the robot in [m]?" />
    <arg name="y"           default="0"     doc="How far leftwards to place the base of the robot in [m]?" />
    <arg name="z"           default="0"     doc="How far upwards to place the base of the robot in [m]?" />
    <arg name="roll"        default="0"     doc="How much to rotate the base of the robot around its X-axis in [rad]?" />
    <arg name="pitch"       default="0"     doc="How much to rotate the base of the robot around its Y-axis in [rad]?" />
    <arg name="yaw"         default="0"     doc="How much to rotate the base of the robot around its Z-axis in [rad]?" />
    <arg name="xacro_args"  default=""      doc="Additional arguments to pass to panda.urdf.xacro" />
    <arg name="initial_joint_positions"
         doc="Initial joint configuration of the panda. Specify as a list of name/value pairs in form of '-J [name-of-joint] [value-in-rad]'. Default is a 90 degree bend in the elbow"
         default="-J $(arg arm_id)_joint1 0
                    -J $(arg arm_id)_joint2 -0.785398163
                    -J $(arg arm_id)_joint3 0
                    -J $(arg arm_id)_joint4 -2.35619449
                    -J $(arg arm_id)_joint5 0
                    -J $(arg arm_id)_joint6 1.57079632679
                    -J $(arg arm_id)_joint7 0.785398163397
                    -J $(arg arm_id)_finger_joint1 0.001
                    -J $(arg arm_id)_finger_joint2 0.001"
        />
        
    
    <arg name="interactive_marker" default="$(eval arg('controller') == 'cartesian_impedance_example_controller')" doc="Should the interactive marker node be started?" />
    
    
    <!-- Load Parameter of robot URDF file [Summit - Panda]-->
    <param name="robot_description"
         command="$(find xacro)/xacro $(find iliad)/robots/summit_panda.urdf.xacro
                  gazebo:=true
                  hand:=$(arg use_gripper)
                  arm_id:=$(arg arm_id)
                  xyz:='$(arg x) $(arg y) $(arg z)'
                  rpy:='$(arg roll) $(arg pitch) $(arg yaw)'
                  $(arg xacro_args)">
    </param>
    
   

    <!-- Spawn Urdf into Gazebo -->
    <!--
    <node name="spawn_urdf" 
          pkg="gazebo_ros"
          type="spawn_model" 
          args="-unpause -urdf -model robot -param robot_description" respawn="false" output="screen" />
     -->
     <rosparam file="$(find franka_gazebo)/config/franka_hw_sim.yaml" subst_value="true" />
   <rosparam file="$(find franka_gazebo)/config/sim_controllers.yaml" subst_value="true" />

  <param name="m_ee" value="0.76" if="$(arg use_gripper)" />
  
  
    <arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" />
    <node name="spawn_urdf"
          pkg="gazebo_ros"
          type="spawn_model"
          respawn="false"
          output="screen"
          args="-param robot_description -urdf -model $(arg arm_id) $(arg unpause)
                $(arg initial_joint_positions)"/>   
                

  <!-- Spawn required ROS controllers -->
  <node pkg="controller_manager"
        type="spawner"
        name="$(arg arm_id)_gripper_spawner"
        if="$(arg use_gripper)"
        args="franka_gripper"
        respawn="false"
  />

  <!-- spawns the controller after the robot was put into its initial joint pose -->
  <node pkg="controller_manager"
        type="spawner"
        name="$(arg arm_id)_controller_spawner"
        respawn="false" output="screen"
        args="--wait-for initialized franka_state_controller $(arg controller)"
  />

   <!-- summit_xl_control nodes -->
    <include ns="robotnik_base_control" file="$(find summit_xl_control)/launch/summit_xl_control.launch">
        <arg name="prefix" value="robot_"/>
        <arg name="sim" value="true"/>
        <arg if="$(arg omni_drive)" name="kinematics" value="omni"/>
        <arg unless="$(arg omni_drive)" name="kinematics" value="skid"/>
        <arg name="ros_planar_move_plugin" value="$(arg ros_planar_move_plugin)"/>
    </include>
        
        
<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher">
    <rosparam param="source_list">[franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
    <param name="rate" value="30"/>
  </node> 
  
  
    <!-- Start only if cartesian_impedance_example_controller 
  <node name="interactive_marker"
        pkg="franka_example_controllers"
        type="interactive_marker.py"
        if="$(arg interactive_marker)">
    <param name="link_name" value="$(arg arm_id)_link0" />
    <remap to="cartesian_impedance_example_controller/equilibrium_pose" from="equilibrium_pose" />
  </node>   
      <node name="interactive_marker"
        pkg="franka_example_controllers"
        type="interactive_marker.py">
    <param name="link_name" value="$(arg arm_id)_link0" />    
  </node>   -->
    <!--
    <node name="joint_state_desired_publisher" pkg="topic_tools" type="relay" args="joint_states joint_states_desired" />   

    <node if="$(arg wheels_gui)" name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" />
    <node unless="$(arg wheels_gui)" name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />-->
    
    <!-- convert joint states to TF transforms for rviz
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
        <remap from="/joint_states" to="joint_states" />
    </node> -->
        
        
    <!-- Open Rviz


    <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />
    -->
    
    <node  pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find franka_example_controllers)/launch/rviz/franka_description_with_marker.rviz"/>
    
</launch>
